import java.time.LocalDate

plugins {
    id 'java-library'
    id 'signing'
    id 'jacoco'
    id 'maven-publish'
    id 'org.jreleaser' version '1.17.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = 'com.factset.sdk'
version = '1.1.5'

dependencies {
    implementation('org.slf4j:slf4j-api:1.7.36')
    implementation('com.nimbusds:nimbus-jose-jwt:10.5')
    implementation('org.json:json:20250517')
    implementation('com.nimbusds:oauth2-oidc-sdk:11.29.1')

    testImplementation(platform('org.junit:junit-bom:5.13.4'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.13.4')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher:1.9.3')

    testImplementation('org.mockito:mockito-core:5.20.0')
    testImplementation('ch.qos.logback:logback-classic:1.3.15')
    testImplementation('com.github.tomakehurst:wiremock-jre8-standalone:2.35.2')
    testImplementation('org.assertj:assertj-core:3.27.6')
    testImplementation('org.hamcrest:hamcrest:2.2')
    testRuntimeOnly('ch.qos.logback:logback-core:1.3.15')

    compileOnly('org.projectlombok:lombok:1.18.42')
    annotationProcessor('org.projectlombok:lombok:1.18.42')
    testCompileOnly('org.projectlombok:lombok:1.18.42')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.42')
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco.xml")

        html.required = true
        html.outputLocation = layout.buildDirectory.dir("reports/jacoco")
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

def artifactStagingDirectory = layout.buildDirectory.dir("build/staging-deploy")

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'FactSet SDK Utilities for Java'
                description = 'FactSet SDK Utilities for Java'
                url = 'https://github.com/factset/enterprise-sdk-utils-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'enterprisesdk'
                        organization = 'FactSet'
                        organizationUrl = 'https://developer.factset.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/factset/enterprise-sdk-utils-java.git'
                    developerConnection = 'scm:git:ssh://factset/enterprise-sdk-utils-java.git'
                    url = 'https://github.com/factset/enterprise-sdk-utils-java/'
                }
            }
        }
    }

    repositories {
        maven {
            url = uri(artifactStagingDirectory)
        }
    }
}

jreleaser {
    gitRootSearch = true

    project {
        description = 'FactSet SDK Utilities for Java'
        authors = ['FactSet']
        license = "APACHE-2.0"
        inceptionYear = "2021"
        vendor = "FactSet"
        copyright = "Copyright (c) ${LocalDate.now().year} FactSet"
        return // for the type checker
    }

    signing {
        active = 'ALWAYS'
        armored = true
        return
    }

    release {
        github {
            skipTag = true
            skipRelease = true
            return
        }
    }

    deploy {
        maven {
            mavenCentral {
                'release-deploy' {
                    active = 'RELEASE'
                    url = "https://central.sonatype.com/api/v1/publisher"
                    stagingRepository artifactStagingDirectory.get().asFile.path
                    retryDelay = 30
                    maxRetries = 100
                }
                return
            }
            nexus2 {
                'snapshot-deploy' {
                    active = 'SNAPSHOT'
                    url = "https://central.sonatype.com/repository/maven-snapshots/"
                    snapshotUrl = "https://central.sonatype.com/repository/maven-snapshots/"
                    applyMavenCentralRules = true
                    snapshotSupported = true
                    closeRepository = true
                    releaseRepository = true
                    stagingRepository artifactStagingDirectory.get().asFile.path
                }
                return
            }
        }
    }
}
